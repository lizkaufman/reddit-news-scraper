const cheerio = require('cheerio');
const puppeteer = require('puppeteer'); //headless chrome - running chrome, but nobody sees it; loads page as if we visited in browser, let JS execute, and then query the DOM
//useful in websites that are rendered with JS/React/etc., not just straight HTML; with axios, would have gotten the initial page with all the script tags, rather than what they render

//TODO: try and pull the titles of the news stories from Reddit News

const url = 'https://www.reddit.com/r/news/';

const headlines = [];

puppeteer
  .launch() //setting up headless chrome; launches the browser
  .then(browser => browser.newPage()) //opens a new empty page like you'd open a new tab normally
  .then(page => {
    //async - it's a promise that waits for the page to load and then returns the page's content
    return page
      .goto(url)
      .then(() => {
        //returns all of the page content after it loads from this .then()
        return page.content();
      })
      .then(html => {
        //takes the html from the prev .then()
        const $ = cheerio.load(html);
        //don't want to just take the class names as they're randomly generated by the JS; need a new strategy to find the common denominator across all the headings
        $('a[href*="/r/news/comments"] h3').each(function(i, element) {
          //uses attribute search to identify all the links with the href that starts with '/r/news/comments' as that was the only thing similar about the headlines on the page
          headlines.push({
            title: $(element).text()
          });
        });
        console.log(headlines);
      });
  });
